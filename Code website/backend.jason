require('dotenv').config();
const express = require('express');
const bcrypt = require('bcrypt');
const { Pool } = require('pg');

const app = express();
const pool = new Pool({
  connectionString: process.env.DATABASE_URL
});

app.use(express.json());

const ADMIN_EMAIL = 'admin@example.com'; // Passe an deine Admin-Mail an

app.post('/login', async (req, res) => {
  const { email, password } = req.body;

  try {
    // Prüfen, ob User bereits existiert
    const userCheck = await pool.query('SELECT * FROM users WHERE email = $1', [email]);

    if (userCheck.rows.length === 0) {
      // User existiert noch nicht → automatisch erstellen

      const roleResult = await pool.query(
        'SELECT id FROM roles WHERE name = $1',
        [email === ADMIN_EMAIL ? 'admin' : 'reader']
      );

      const hashedPassword = await bcrypt.hash(password, 10);

      await pool.query(
        'INSERT INTO users (email, password_hash, role_id) VALUES ($1, $2, $3)',
        [email, hashedPassword, roleResult.rows[0].id]
      );

      return res.status(201).json({ message: 'User created and logged in (auto)' });
    } else {
      // User existiert → Login prüfen
      const valid = await bcrypt.compare(password, userCheck.rows[0].password_hash);

      if (!valid) {
        return res.status(401).json({ message: 'Invalid credentials' });
      }

      return res.json({ message: 'Login successful' });
    }
  } catch (err) {
    console.error(err);
    res.status(500).json({ message: 'Server error' });
  }
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => console.log(`Server running on port ${PORT}`));
